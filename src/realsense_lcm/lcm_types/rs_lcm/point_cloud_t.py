"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import rs_lcm.point_t

import rs_lcm.header_t

class point_cloud_t(object):
    __slots__ = ["header", "num_points", "points"]

    __typenames__ = ["rs_lcm.header_t", "int32_t", "rs_lcm.point_t"]

    __dimensions__ = [None, None, ["num_points"]]

    def __init__(self):
        self.header = rs_lcm.header_t()
        self.num_points = 0
        self.points = []

    def encode(self):
        buf = BytesIO()
        buf.write(point_cloud_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == rs_lcm.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">i", self.num_points))
        for i0 in range(self.num_points):
            assert self.points[i0]._get_packed_fingerprint() == rs_lcm.point_t._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != point_cloud_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return point_cloud_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = point_cloud_t()
        self.header = rs_lcm.header_t._decode_one(buf)
        self.num_points = struct.unpack(">i", buf.read(4))[0]
        self.points = []
        for i0 in range(self.num_points):
            self.points.append(rs_lcm.point_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if point_cloud_t in parents: return 0
        newparents = parents + [point_cloud_t]
        tmphash = (0xef9b8c517c4acf37+ rs_lcm.header_t._get_hash_recursive(newparents)+ rs_lcm.point_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if point_cloud_t._packed_fingerprint is None:
            point_cloud_t._packed_fingerprint = struct.pack(">Q", point_cloud_t._get_hash_recursive([]))
        return point_cloud_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

