"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class string_array_t(object):
    __slots__ = ["num_strings", "string_array"]

    __typenames__ = ["int32_t", "string"]

    __dimensions__ = [None, ["num_strings"]]

    def __init__(self):
        self.num_strings = 0
        self.string_array = []

    def encode(self):
        buf = BytesIO()
        buf.write(string_array_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_strings))
        for i0 in range(self.num_strings):
            __string_array_encoded = self.string_array[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__string_array_encoded)+1))
            buf.write(__string_array_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != string_array_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return string_array_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = string_array_t()
        self.num_strings = struct.unpack(">i", buf.read(4))[0]
        self.string_array = []
        for i0 in range(self.num_strings):
            __string_array_len = struct.unpack('>I', buf.read(4))[0]
            self.string_array.append(buf.read(__string_array_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if string_array_t in parents: return 0
        tmphash = (0xda5f0859f4e49ed) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if string_array_t._packed_fingerprint is None:
            string_array_t._packed_fingerprint = struct.pack(">Q", string_array_t._get_hash_recursive([]))
        return string_array_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

